{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"N-Tier Application with Automated CI/CD Pipeline","text":"<p>A complete 3-tier web application with FastAPI backend, Streamlit frontend, and PostgreSQL database, featuring automated CI/CD pipeline using Docker, Kubernetes, Helm, GitHub Actions, and ArgoCD.</p>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<pre><code>architecture-beta\n    group fs(cloud)[3 Tier Architecture]\n    group ui(internet)[Frontend] in fs\n    group api(internet)[Backend] in fs\n\n    service client(server)[Streamlit] in ui\n    service db(database)[PostgreSQL] in api\n    service server(server)[FastAPI] in api\n\n    client:R &lt;--&gt; L:server\n    db:L &lt;--&gt; R:server</code></pre>"},{"location":"#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 .github/workflows/main.yaml     # CI/CD Pipeline\n\u251c\u2500\u2500 app/                           # FastAPI Application\n\u251c\u2500\u2500 client/                        # Streamlit Application\n\u251c\u2500\u2500 helm/                          # Helm Charts\n\u251c\u2500\u2500 kubernetes/                    # K8s Manifests\n\u251c\u2500\u2500 docker-compose.yml             # Local Development\n\u251c\u2500\u2500 Dockerfile.server              # API Docker Image\n\u251c\u2500\u2500 Dockerfile.client              # UI Docker Image\n\u251c\u2500\u2500 argocd-application.yaml        # ArgoCD Application\n\u2514\u2500\u2500 pyproject.toml                 # Python Dependencies\n</code></pre>"},{"location":"#manual-deployment-guide","title":"\ud83d\ude80 Manual Deployment Guide","text":""},{"location":"#1-python-environment-setup-with-uv","title":"1. Python Environment Setup with UV","text":"<ul> <li> <p>Install UV (if not already installed):</p> <pre><code># macOS using Homebrew (recommended)\nbrew install uv\n\n# macOS/Linux using installer\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Using pip\npip install uv\n</code></pre> </li> <li> <p>Setting up UV (Python's Package Manager):</p> <pre><code># Initialize UV project\nuv init --name n-tier --app\n\n# Create virtual environment\nuv venv --python 3.13\n\n# Activate environment (Linux/macOS)\nsource .venv/bin/activate\n\n# Install dependencies\nuv sync\n</code></pre> </li> <li> <p>Run The Application locally:</p> <ul> <li>Run API(FastAPI)     <pre><code>uv run uvicorn app.main:app --reload --host 0.0.0.0 --port 8000\n</code></pre></li> <li>Run Streamlit application      <pre><code>uv run streamlit run main.py\n</code></pre></li> </ul> </li> </ul>"},{"location":"#2-docker-operations","title":"2. Docker Operations","text":""},{"location":"#build-docker-images","title":"Build Docker Images","text":"<pre><code># Build FastAPI server image\ndocker build -f Dockerfile.server -t &lt;dockerhub-user-name&gt;/fastapi-server:latest .\n\n# Build Streamlit client image  \ndocker build -f Dockerfile.client -t &lt;dockerhub-user-name&gt;/streamlit-client:latest .\n</code></pre>"},{"location":"#push-to-dockerhubghcr","title":"Push to DockerHub/ghcr","text":"<pre><code># Login to DockerHub\ndocker login -u &lt;username(dockerhub/ghcr.io)&gt;\n\n# Push images\ndocker push &lt;dockerhub/ghcr.io-user-name&gt;/fastapi-server:latest\ndocker push &lt;dockerhub/ghcr.io-user-name&gt;/streamlit-client:latest\n</code></pre>"},{"location":"#test-with-docker-compose","title":"Test with Docker Compose","text":"<ul> <li> <p>Update the username in the docker-compose file if you want then execute the following commands:</p> <pre><code># Start application stack\ndocker compose up -d\n\n# View logs\ndocker compose logs -f\n\n# Stop and cleanup\ndocker compose down\n</code></pre> </li> </ul> <p>Access Points:</p> <ul> <li>Frontend: http://localhost:8501</li> <li>API: http://localhost:8000</li> <li>PgAdmin: http://localhost:5050</li> </ul>"},{"location":"#3-kubernetes-deployment-orbstack","title":"3. Kubernetes Deployment (OrbStack)","text":""},{"location":"#deploy-with-kubectl","title":"Deploy with Kubectl","text":"<pre><code># Create namespace\nkubectl apply -f kubernetes/namespace.yaml\n\n# Deploy all services\nkubectl apply -f kubernetes/\n\n# Check deployment status\nkubectl get pods -n fastapi-app\nkubectl get services -n fastapi-app\n\n# Port forward for local access\nkubectl port-forward -n fastapi-app svc/client-service 8501:8501\nkubectl port-forward -n fastapi-app svc/api-service 8000:8000\n</code></pre>"},{"location":"#cleanup","title":"Cleanup","text":"<pre><code># Delete all resources\nkubectl delete -f kubernetes/\n\n# Delete namespace\nkubectl delete namespace fastapi-app\n</code></pre>"},{"location":"#4-helm-deployment","title":"4. Helm Deployment","text":""},{"location":"#deploy-with-helm","title":"Deploy with Helm","text":"<pre><code># Install application\nhelm install n-tier-app ./helm\n\n# Upgrade deployment\nhelm upgrade n-tier-app ./helm\n\n# Check status\nhelm status n-tier-app\nkubectl get pods -n fastapi-app\n</code></pre>"},{"location":"#cleanup_1","title":"Cleanup","text":"<pre><code># Uninstall Helm release\nhelm uninstall n-tier-app\n\n# Delete namespace if needed\nkubectl delete namespace fastapi-app\n</code></pre>"},{"location":"#5-argocd-setup","title":"5. ArgoCD Setup","text":""},{"location":"#install-argocd","title":"Install ArgoCD","text":"<pre><code># Create ArgoCD namespace\nkubectl create namespace argocd\n\n# Install ArgoCD\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Wait for pods to be ready\nkubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd\n</code></pre>"},{"location":"#access-argocd","title":"Access ArgoCD","text":"<pre><code># Port forward ArgoCD server\nkubectl port-forward svc/argocd-server -n argocd 8080:443\n\n# Get admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre> <p>ArgoCD Access: https://localhost:8080</p> <ul> <li>Username: admin</li> <li>Password: (from command above)</li> </ul>"},{"location":"#deploy-application-via-argocd","title":"Deploy Application via ArgoCD","text":"<pre><code># Apply ArgoCD application\nkubectl apply -f argocd-application.yaml\n\n# Sync application\nargocd app sync test-three-tier-app\n</code></pre>"},{"location":"#cleanup-argocd","title":"Cleanup ArgoCD","text":"<pre><code># Delete application\nkubectl delete -f argocd-application.yaml\n\n# Uninstall ArgoCD\nkubectl delete -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\nkubectl delete namespace argocd\n</code></pre>"},{"location":"#automated-cicd-pipeline","title":"\ud83d\udd04 Automated CI/CD Pipeline","text":""},{"location":"#cicd-flow-diagram","title":"CI/CD Flow Diagram","text":""},{"location":"#pipeline-features","title":"Pipeline Features","text":"<ul> <li> <p>Continuous Integration:</p> <ul> <li>Automated Docker image builds</li> <li>Automatic tagging with commit SHA</li> <li>DockerHub registry push</li> <li>Automatic Helm values update</li> </ul> </li> <li> <p>Continuous Deployment:</p> <ul> <li>GitOps approach with ArgoCD</li> <li>Auto Sync with Updated Helm values</li> <li>Self-healing deployments</li> <li>Rollback capabilities</li> </ul> </li> </ul>"},{"location":"#pipeline-triggers","title":"Pipeline Triggers","text":"<ul> <li>Triggers on push to <code>main</code> branch</li> <li>Builds both FastAPI and Streamlit images</li> <li>Updates Helm chart with new image tags</li> <li>ArgoCD automatically syncs changes to cluster</li> </ul>"},{"location":"#required-secrets","title":"Required Secrets","text":"<p>Configure these secrets in GitHub repository settings:</p> <pre><code>DOCKERHUB_USRNAME=your_dockerhub_username\nDOCKERHUB_PSWD=your_dockerhub_password\n</code></pre>"},{"location":"#technology-stack","title":"\ud83d\udee0\ufe0f Technology Stack","text":"<ul> <li>Frontend: Streamlit</li> <li>Backend: FastAPI</li> <li>Database: PostgreSQL</li> <li>Containerization: Docker</li> <li>Orchestration: Kubernetes</li> <li>Package Management: Helm</li> <li>CI/CD: GitHub Actions</li> <li>GitOps: ArgoCD</li> <li>Local K8s: OrbStack</li> </ul>"},{"location":"#development-workflow","title":"\ud83d\udcdd Development Workflow","text":"<ol> <li>Local Development: Use UV for dependency management</li> <li>Testing: Docker Compose for integration testing</li> <li>Deployment: Kubernetes with Helm charts</li> <li>Production: Automated CI/CD with ArgoCD</li> </ol>"},{"location":"#monitoring-debugging","title":"\ud83d\udd0d Monitoring &amp; Debugging","text":"<pre><code># Check application logs\nkubectl logs -f deployment/api-deployment -n fastapi-app\nkubectl logs -f deployment/client-deployment -n fastapi-app\n\n# Check ArgoCD application status\nkubectl get applications -n argocd\nargocd app get test-three-tier-app\n\n# Monitor resource usage\nkubectl top pods -n fastapi-app\n</code></pre> <p>Note</p> <p>Ensure OrbStack or another local Kubernetes solution is running before executing Kubernetes commands.</p>"}]}